##### Multivariate regression model #####
# Including standardized features and scaled house prices
import math
from sklearn.preprocessing import PolynomialFeatures, StandardScaler, MinMaxScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.model_selection import RandomizedSearchCV, train_test_split
from sklearn.linear_model import LinearRegression
import pandas as pd
import numpy as np
np.random.seed(19680801)

# read the csv file into a pandas dataframe
# Split data into training and test set:
trdata = pd.read_csv('trdata_netw5_k1_features.csv')
tedata = pd.read_csv('tedata_netw5_k1_features.csv')

print('Missing values trdata? ', trdata.isnull().values.any())
print('Missing values tedata? ', tedata.isnull().values.any())


# Dummy variable for waterfront:
waterfront = pd.get_dummies(tedata['waterfront'], drop_first = True, prefix='waterfront_')
# Dummy variable for zipcode:
zipcode = pd.get_dummies(tedata['zipcode'], drop_first = True, prefix='zipcode_')
# Dropping the original 'waterfront'and ‘zipcode’ columns:
tedata = tedata.drop(['zipcode','waterfront'], axis = 1)
# Adding the dummy columns to the dataset:
tedata = pd.concat([tedata,zipcode,waterfront], axis=1)
#print(df.head())
#print(df.dtypes)
# Dummy variable for waterfront:
waterfront = pd.get_dummies(trdata['waterfront'], drop_first = True, prefix='waterfront_')
# Dummy variable for zipcode:
zipcode = pd.get_dummies(trdata['zipcode'], drop_first = True, prefix='zipcode_')
# Dropping the original 'waterfront'and ‘zipcode’ columns:
trdata = trdata.drop(['zipcode','waterfront'], axis = 1)
# Adding the dummy columns to the dataset:
trdata = pd.concat([trdata,zipcode,waterfront], axis=1)
#print(df.head())

'''
df = pd.read_csv('my_filtered_dataset.csv')
del df['ID']
del df['date']
del df['index']

# Dummy variable for waterfront:
waterfront = pd.get_dummies(df['waterfront'], drop_first = True, prefix='waterfront_')
# Dummy variable for zipcode:
zipcode = pd.get_dummies(df['zipcode'], drop_first = True, prefix='zipcode_')
# Dropping the original 'waterfront'and ‘zipcode’ columns:
df = df.drop(['zipcode','waterfront'], axis = 1)
# Adding the dummy columns to the dataset:
df = pd.concat([df,zipcode,waterfront], axis=1)
#print(df.head())
#print(df.dtypes)

trdata,tedata = train_test_split(df,test_size=0.3,random_state=42)
#print('Training data: ',trdata)
#print('Test data: ',tedata)'''

# Split target variable from independent variables:
# Training data:
tr_hprice = trdata['Price'].copy() # Target variable
tr_X = trdata.copy() # Independent variables
del tr_X['Price'] # Delete the target variable

#Test data:
te_hprice = tedata['Price'].copy() # Target variable
te_X = tedata.copy() # Independent variables
del te_X['Price'] # Delete the target variable

# Standardizing our data:
# Initialize the StandardScaler object
scaler = StandardScaler()
# Fit the scaler on the training data only
scaler.fit(tr_X)
# Standardize the data using the scaler
tr_X_stand = scaler.transform(tr_X)
te_X_stand = scaler.transform(te_X)

# Scaling the house prices:
# MinMaxScaler() scales the data such that the range of the data is between 0 and 1.
# The scaling is performed by subtracting the minimum value in each feature column and then
# dividing by the range of that feature column (max minus min). The scaling process is performed
# independently for each feature, meaning that the minimum and maximum values used for scaling
# are calculated separately for each feature. This ensures that each feature is scaled to the same
# range and prevents any one feature from dominating the others.
scaler2 = MinMaxScaler()
# Reshape tr_hprice to 2D array
#print(np.array(tr_hprice).reshape(-1, 1))
#print(np.array(tr_hprice).reshape(1, -1))
tr_hprice = np.array(tr_hprice).reshape(-1, 1)
tr_Y_scaled = scaler2.fit_transform(tr_hprice)

# Create an instance of the linear regression model
model = LinearRegression()
# Fit the model to the standardized training data and target variable
model.fit(tr_X_stand, tr_Y_scaled)
# Predict the house prices on the standardized test data
te_Y_scaled = model.predict(te_X_stand)
# Inverse scale the predicted house prices to the original scale
te_hprice_pred = scaler2.inverse_transform(te_Y_scaled)
te_hprice_pred = np.array(te_hprice_pred).reshape(-1, 1)
#print(type(Y_nonscaled_predicted))
#print(type(te_hprice))

#print(te_hprice_pred)
#print(te_hprice)
print("Mean Absolute Error:", mean_absolute_error(te_hprice,te_hprice_pred))
mse = mean_squared_error(te_hprice,te_hprice_pred)
print("Mean Squared Error:", mse)
print("Root Mean Squared Error:", math.sqrt(mse))
